# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import json


def storageimportexport_location_list(cmd, client):
    return client.list()


def storageimportexport_location_show(cmd, client,
                                      location_name):
    return client.get(location_name=location_name)


def storageimportexport_job_list(cmd, client,
                                 top=None,
                                 filter=None,
                                 resource_group_name=None):
    if resource_group_name is not None:
        return client.list_by_resource_group(top=top,
                                             filter=filter,
                                             resource_group_name=resource_group_name)
    return client.list_by_subscription(top=top,
                                       filter=filter)


def storageimportexport_job_show(cmd, client,
                                 job_name,
                                 resource_group_name):
    return client.get(job_name=job_name,
                      resource_group_name=resource_group_name)


def storageimportexport_job_create(cmd, client,
                                   job_name,
                                   resource_group_name,
                                   client_tenant_id=None,
                                   location=None,
                                   tags=None,
                                   properties_storage_account_id=None,
                                   properties_job_type=None,
                                   properties_return_address=None,
                                   properties_return_shipping=None,
                                   properties_shipping_information=None,
                                   properties_delivery_package=None,
                                   properties_return_package=None,
                                   properties_diagnostics_path=None,
                                   properties_log_level=None,
                                   properties_backup_drive_manifest=None,
                                   properties_state=None,
                                   properties_cancel_requested=None,
                                   properties_percent_complete=None,
                                   properties_incomplete_blob_list_uri=None,
                                   properties_drive_list=None,
                                   properties_export=None,
                                   properties_provisioning_state=None):
    if isinstance(tags, str):
        tags = json.loads(tags)
    return client.create(job_name=job_name,
                         resource_group_name=resource_group_name,
                         client_tenant_id=client_tenant_id,
                         location=location,
                         tags=tags,
                         storage_account_id=properties_storage_account_id,
                         job_type=properties_job_type,
                         return_address=properties_return_address,
                         return_shipping=properties_return_shipping,
                         shipping_information=properties_shipping_information,
                         delivery_package=properties_delivery_package,
                         return_package=properties_return_package,
                         diagnostics_path=properties_diagnostics_path,
                         log_level=properties_log_level,
                         backup_drive_manifest=properties_backup_drive_manifest,
                         state=properties_state,
                         cancel_requested=properties_cancel_requested,
                         percent_complete=properties_percent_complete,
                         incomplete_blob_list_uri=properties_incomplete_blob_list_uri,
                         drive_list=properties_drive_list,
                         export=properties_export,
                         provisioning_state=properties_provisioning_state)


def storageimportexport_job_update(cmd, client,
                                   job_name,
                                   resource_group_name,
                                   tags=None,
                                   properties_cancel_requested=None,
                                   properties_state=None,
                                   properties_return_address=None,
                                   properties_return_shipping=None,
                                   properties_delivery_package=None,
                                   properties_log_level=None,
                                   properties_backup_drive_manifest=None,
                                   properties_drive_list=None):
    if isinstance(tags, str):
        tags = json.loads(tags)
    return client.update(job_name=job_name,
                         resource_group_name=resource_group_name,
                         tags=tags,
                         cancel_requested=properties_cancel_requested,
                         state=properties_state,
                         return_address=properties_return_address,
                         return_shipping=properties_return_shipping,
                         delivery_package=properties_delivery_package,
                         log_level=properties_log_level,
                         backup_drive_manifest=properties_backup_drive_manifest,
                         drive_list=properties_drive_list)


def storageimportexport_job_delete(cmd, client,
                                   job_name,
                                   resource_group_name):
    return client.delete(job_name=job_name,
                         resource_group_name=resource_group_name)


def storageimportexport_bit_locker_key_list(cmd, client,
                                            job_name,
                                            resource_group_name):
    return client.list(job_name=job_name,
                       resource_group_name=resource_group_name)
